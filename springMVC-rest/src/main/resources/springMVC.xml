<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <!--扫描组件-->
    <context:component-scan base-package="com.litway.controller,com.litway.dao"/>

    <!--配置视图解析器-->
    <bean id="viewResolver" class="org.thymeleaf.spring5.view.ThymeleafViewResolver">
        <property name="order" value="1"/>
        <property name="characterEncoding" value="UTF-8"/>
        <property name="templateEngine">
            <bean class="org.thymeleaf.spring5.SpringTemplateEngine">
                <property name="templateResolver">
                    <bean class="org.thymeleaf.spring5.templateresolver.SpringResourceTemplateResolver">
                        <!-- 视图前缀 -->
                        <property name="prefix" value="/WEB-INF/templates/"/>
                        <!-- 视图后缀 -->
                        <property name="suffix" value=".html"/>
                        <property name="templateMode" value="HTML5"/>
                        <property name="characterEncoding" value="UTF-8" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>

    <!-- 配置视图控制器. 使请求地址和相关界面进行映射 -->
    <mvc:view-controller path="/" view-name="index" />
    <mvc:view-controller path="/toAdd" view-name="employee_add" />

    <!--
        将默认资源的访问权限交给tomcat
        tomcat服务器本身也有一个web.xml配置文件. 这个配置文件, 规定了由JspServlet处理jsp界面(jsp本质是servlet),
        规定DefaultServlet处理所有路由请求. 但是此时工程的web.xml要求让DispatcherServlet来处理所有请求, 这样就找不到了
        静态资源, 因此会报错. 就是说, 静态资源的请求再过来会请求DispatcherServlet, 但是DispatcherServlet并不知道.
        所有报错, 需要下面这两个配置同时使用来解决.

        如果仅仅配置<mvc:default-servlet-handler />, 而没有<mvc:annotation-driven />, 那么请求仍然是被DefaultServlet
        处理的. 此时就只有静态资源能够访问, 而请求却访问不了.

        简单说, 请求过来, 先使用DispatcherServlet去解决请求, 当找不到资源时, 再交由<mvc:default-servlet-handler />处理.
    -->
    <mvc:default-servlet-handler />
    <!--开启mvc的注解驱动-->
    <mvc:annotation-driven />


</beans>
